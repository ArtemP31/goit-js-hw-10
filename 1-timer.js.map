{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst selector = document.querySelector('#datetime-picker');\nconst buttonEl = document.querySelector('[data-start]');\nconst dataDays = document.querySelector('[data-days]');\nconst dataHours = document.querySelector('[data-hours]');\nconst dataMinutes = document.querySelector('[data-minutes]');\nconst dataSeconds = document.querySelector('[data-seconds]');\n\nbuttonEl.addEventListener('click', startTimer);\n\nbuttonEl.disabled = true;\nlet intervalId = null;\nlet userSelectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    // console.log(selectedDates[0]);\n    if (selectedDates[0] <= new Date()) {\n      return iziToast.error({\n        position: 'topRight',\n\n        message: 'Please choose a date in the future',\n      });\n    }\n    userSelectedDate = selectedDates[0];\n    buttonEl.disabled = false;\n  },\n};\n\nflatpickr(selector, options);\n\n\n\nfunction startTimer(){\n  selector.disabled = true;\n  buttonEl.disabled = true;\n\n  intervalId = setInterval(upTimer, 1000);\n  return;\n}\n\nfunction upTimer(){\n  const curentTime = userSelectedDate - new Date();\n  if (curentTime <= 0) {\n    selector.disabled = false;\n    clearInterval(intervalId);\n    return;\n  }\n\n\n  dataDays.textContent = String(convertMs(curentTime).days).padStart(2, 0);\n  dataHours.textContent = String(convertMs(curentTime).hours).padStart(2, 0);\n  dataMinutes.textContent = String(convertMs(curentTime).minutes).padStart(2, 0);\n  dataSeconds.textContent = String(convertMs(curentTime).seconds).padStart(2, 0);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\n"],"names":["selector","buttonEl","dataDays","dataHours","dataMinutes","dataSeconds","startTimer","intervalId","userSelectedDate","options","selectedDates","iziToast","flatpickr","upTimer","curentTime","convertMs","ms","days","hours","minutes","seconds"],"mappings":"+IAQA,MAAMA,EAAW,SAAS,cAAc,kBAAkB,EACpDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAS,iBAAiB,QAASK,CAAU,EAE7CL,EAAS,SAAW,GACpB,IAAIM,EAAa,KACbC,EAAmB,KAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAC1B,OAAOC,EAAS,MAAM,CACpB,SAAU,WAEV,QAAS,oCACjB,CAAO,EAEHH,EAAmBE,EAAc,CAAC,EAClCT,EAAS,SAAW,EACrB,CACH,EAEAW,EAAUZ,EAAUS,CAAO,EAI3B,SAASH,GAAY,CACnBN,EAAS,SAAW,GACpBC,EAAS,SAAW,GAEpBM,EAAa,YAAYM,EAAS,GAAI,CAExC,CAEA,SAASA,GAAS,CAChB,MAAMC,EAAaN,EAAmB,IAAI,KAC1C,GAAIM,GAAc,EAAG,CACnBd,EAAS,SAAW,GACpB,cAAcO,CAAU,EACxB,MACD,CAGDL,EAAS,YAAc,OAAOa,EAAUD,CAAU,EAAE,IAAI,EAAE,SAAS,EAAG,CAAC,EACvEX,EAAU,YAAc,OAAOY,EAAUD,CAAU,EAAE,KAAK,EAAE,SAAS,EAAG,CAAC,EACzEV,EAAY,YAAc,OAAOW,EAAUD,CAAU,EAAE,OAAO,EAAE,SAAS,EAAG,CAAC,EAC7ET,EAAY,YAAc,OAAOU,EAAUD,CAAU,EAAE,OAAO,EAAE,SAAS,EAAG,CAAC,CAC/E,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}